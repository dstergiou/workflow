digraph {
    fontname = "Calibri";
    product_owner[
        shape=box, 
        style="rounded,filled", 
        color=darkgreen, 
        fontcolor=white,
        label="Product owner"];
        
    feature[
        shape=box, 
        style="rounded,filled", 
        color=blue, 
        fontcolor=white,
        label="Feature";
    ]
    epic[
        shape=box, 
        style="rounded,filled", 
        color=blue, 
        fontcolor=white,
        label="Epic(s)";
    ]
    security_requirements[
        shape=Mrecord, 
        style="rounded,filled", 
        color=orange, 
        fontcolor=white,
        label="Security Requirements";
    ]
    design[
        shape=box, 
        style="rounded,filled", 
        color=blue, 
        fontcolor=white,
        label="Design & Architecture";
    ]
    threat_model[
        shape=box, 
        style="rounded,filled", 
        color=orange, 
        fontcolor=white,
        label="Threat Model";
    ]
    code[
        shape=box, 
        style="rounded,filled", 
        color=blue, 
        fontcolor=white,
        label="Code";
    ]
    sast[
        shape=box, 
        style="rounded,filled", 
        color=orange, 
        fontcolor=white,
        label="Static application security testing (SAST)";
    ]
    infrastructure_as_code[
        shape=box, 
        style="rounded,filled", 
        color=purple, 
        fontcolor=white,
        label="Infrastructure as code";
    ]
    access_management[
        shape=box, 
        style="rounded,filled", 
        color=orange, 
        fontcolor=white,
        label="Access Management";
    ]
    network_segregation[
        shape=box, 
        style="rounded,filled", 
        color=orange, 
        fontcolor=white,
        label="Software Defined Networks (SDN)";
    ]
    unit_testing[
        shape=box, 
        style="rounded,filled", 
        color=blue, 
        fontcolor=white,
        label="Unit Testing";
    ]
    security_testing[
        shape=box, 
        style="rounded,filled", 
        color=orange, 
        fontcolor=white,
        label="Security Testing";
    ]
    commit[
        shape=box, 
        style="rounded,filled", 
        color=blue, 
        fontcolor=white,
        label="Commit to Repository";
    ]
    repository_check[
        shape=box, 
        style="rounded,filled", 
        color=orange, 
        fontcolor=white,
        label="Repository Check";
    ]
    build[
        shape=box, 
        style="rounded,filled", 
        color=blue, 
        fontcolor=white,
        label="Build";
    ]
    dependency_check[
        shape=box, 
        style="rounded,filled", 
        color=orange, 
        fontcolor=white,
        label="Dependency Check";
    ]
    package[
        shape=box, 
        style="rounded,filled", 
        color=blue, 
        fontcolor=white,
        label="Package";
    ]
    registry[
        shape=box, 
        style="rounded,filled", 
        color=blue, 
        fontcolor=white,
        label="Registry";
    ]
    image_scan[
        shape=box, 
        style="rounded,filled", 
        color=orange, 
        fontcolor=white,
        label="Image scan";
    ]
    staging[
        shape=box, 
        style="rounded,filled", 
        color=blue, 
        fontcolor=white,
        label="Staging";
    ]
    automated_tests[
        shape=box, 
        style="rounded,filled", 
        color=orange, 
        fontcolor=white,
        label="Automated testing";
    ]
    dast[
        shape=box, 
        style="rounded,filled", 
        color=orange, 
        fontcolor=white,
        label="Dynamic application security testing (DAST)";
    ]
    production[
        shape=box, 
        style="rounded,filled", 
        color=darkgreen, 
        fontcolor=white,
        label="Production";
    ]
    vulnerability_scanning[
        shape=box, 
        style="rounded,filled", 
        color=orange, 
        fontcolor=white,
        label="Vulnerability Scanning";
    ]
    rasp[
        shape=box, 
        style="rounded,filled", 
        color=orange, 
        fontcolor=white,
        label="Runtime application self-protection (RASP)";
    ]
    logging[
        shape=box, 
        style="rounded,filled", 
        color=orange, 
        fontcolor=white,
        label="Logging";
    ]
    product_owner -> feature [label = "describes a "]
    feature -> epic [label = "turns into an"]
    security_requirements -> epic [color="orange", dir=none]
    epic -> design [label = "requires design decisions"]
    threat_model -> design [color="orange", dir=none]
    design -> code [ label = "becomes" ]
    sast -> code [color="orange", dir=none]
    infrastructure_as_code -> code [label = "infra provided to the dev"]
    access_management -> infrastructure_as_code [color="orange", dir=none]
    network_segregation -> infrastructure_as_code [color="orange", dir=none]
    code -> unit_testing [ label = "is verified by" ]
    security_testing -> unit_testing [ color="orange", dir=none]
    unit_testing -> commit [ label = "and then commited to repo"]
    repository_check -> commit [ color="orange", dir=none]
    commit -> build [ label = "commit triggers a build"]
    dependency_check -> commit [ color="orange", dir=none]
    build -> package [ label = "and the build is packaged" ]
    package -> registry [ label = "image saved in a registry" ]
    image_scan -> registry [ color="orange", dir=none ]
    registry -> staging [ label = "image deployed on staging"]
    automated_tests -> staging [ color="orange", dir=none]
    dast -> staging [ color="orange", dir=none]
    staging -> production [label = "if tests pass, image tagged as prod"]
    staging -> code [label = "if tests fail, it goes back to code", color="red" ]
    vulnerability_scanning -> production [ color="orange", dir=none]
    rasp -> production [ color="orange", dir=none]
    logging -> production [ color="orange", dir=none]
}